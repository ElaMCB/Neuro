#!/usr/bin/env python3
"""
Send job search results via email
"""
import os
import smtplib
import json
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from datetime import datetime
from pathlib import Path

def send_job_search_email(
    results_file: str = None,
    report_file: str = None,
    recipient_email: str = None,
    sender_email: str = None,
    sender_password: str = None,
    smtp_server: str = "smtp.gmail.com",
    smtp_port: int = 587
):
    """
    Send job search results via email
    
    Args:
        results_file: Path to JSON results file
        report_file: Path to text report file
        recipient_email: Email address to send to
        sender_email: Email address to send from (Gmail)
        sender_password: App password for Gmail
        smtp_server: SMTP server (default: Gmail)
        smtp_port: SMTP port (default: 587 for TLS)
    """
    
    # Get email from environment or use default
    recipient = recipient_email or os.getenv('RECIPIENT_EMAIL', 'elena.mereanu@gmail.com')
    sender = sender_email or os.getenv('SENDER_EMAIL')
    password = sender_password or os.getenv('SENDER_PASSWORD')
    
    if not sender or not password:
        print("‚ö†Ô∏è  Email credentials not configured. Skipping email send.")
        print("   Set SENDER_EMAIL and SENDER_PASSWORD environment variables or GitHub secrets")
        return False
    
    # Create message
    msg = MIMEMultipart()
    msg['From'] = sender
    msg['To'] = recipient
    msg['Subject'] = f"üîç Weekly Job Search Results - {datetime.now().strftime('%Y-%m-%d')}"
    
    # Build email body
    body = f"""
    <html>
      <head></head>
      <body>
        <h2>üéØ Weekly Job Search Results</h2>
        <p><strong>Date:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        
        <h3>üìä Summary</h3>
    """
    
    # Add report content if available
    if report_file and os.path.exists(report_file):
        try:
            with open(report_file, 'r', encoding='utf-8') as f:
                report_content = f.read()
                body += f"<pre>{report_content}</pre>"
        except Exception as e:
            body += f"<p>‚ö†Ô∏è  Could not read report file: {e}</p>"
    
    # Add job count from results file
    if results_file and os.path.exists(results_file):
        try:
            with open(results_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                if isinstance(data, list):
                    job_count = len(data)
                    body += f"<p><strong>Total jobs found:</strong> {job_count}</p>"
                    
                    # List top jobs
                    if job_count > 0:
                        body += "<h3>üèÜ Top Matches</h3><ul>"
                        for job in data[:10]:  # Top 10
                            title = job.get('title', 'N/A')
                            company = job.get('company', 'N/A')
                            url = job.get('url', '#')
                            match_score = job.get('match_score', 0)
                            body += f"<li><strong>{title}</strong> at {company} (Match: {match_score}%) - <a href='{url}'>View</a></li>"
                        body += "</ul>"
        except Exception as e:
            body += f"<p>‚ö†Ô∏è  Could not read results file: {e}</p>"
    
    body += """
        <hr>
        <p><small>This email was automatically generated by Neuro Weekly Job Search.</small></p>
      </body>
    </html>
    """
    
    msg.attach(MIMEText(body, 'html'))
    
    # Attach files if they exist
    attachments = []
    if results_file and os.path.exists(results_file):
        attachments.append(results_file)
    if report_file and os.path.exists(report_file):
        attachments.append(report_file)
    
    for filepath in attachments:
        try:
            with open(filepath, 'rb') as f:
                part = MIMEBase('application', 'octet-stream')
                part.set_payload(f.read())
                encoders.encode_base64(part)
                part.add_header(
                    'Content-Disposition',
                    f'attachment; filename= {os.path.basename(filepath)}'
                )
                msg.attach(part)
        except Exception as e:
            print(f"‚ö†Ô∏è  Could not attach {filepath}: {e}")
    
    # Send email
    try:
        server = smtplib.SMTP(smtp_server, smtp_port)
        server.starttls()
        server.login(sender, password)
        text = msg.as_string()
        server.sendmail(sender, recipient, text)
        server.quit()
        print(f"‚úÖ Email sent successfully to {recipient}")
        return True
    except Exception as e:
        print(f"‚ùå Error sending email: {e}")
        return False

if __name__ == "__main__":
    import sys
    
    # Find latest results and report files
    results_dir = Path("job_search_results")
    reports_dir = Path("job_search_reports")
    
    results_file = None
    report_file = None
    
    # Find most recent results file
    if results_dir.exists():
        json_files = list(results_dir.glob("job_search_*.json"))
        if json_files:
            results_file = str(max(json_files, key=lambda p: p.stat().st_mtime))
    
    # Find most recent report file
    if reports_dir.exists():
        report_files = list(reports_dir.glob("weekly_report_*.txt"))
        if report_files:
            report_file = str(max(report_files, key=lambda p: p.stat().st_mtime))
    
    if not results_file and not report_file:
        print("‚ö†Ô∏è  No results or report files found. Skipping email send.")
        sys.exit(0)
    
    success = send_job_search_email(
        results_file=results_file,
        report_file=report_file
    )
    
    sys.exit(0 if success else 1)

