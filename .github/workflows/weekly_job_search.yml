name: Weekly Job Search

on:
  schedule:
    # Run every Monday at 9:00 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:  # Allow manual trigger

jobs:
  weekly-job-search:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements_job_search.txt ]; then
          pip install -r requirements_job_search.txt
        else
          echo "⚠️  requirements_job_search.txt not found, installing default packages"
          pip install schedule requests python-docx beautifulsoup4 lxml
        fi
    
    - name: Create directories
      run: |
        mkdir -p job_search_results job_search_reports resume_templates
    
    - name: Create profile config (from template)
      run: |
        # Create a template profile config if it doesn't exist
        # User should replace with actual config or use secrets
        EMAIL="${USER_EMAIL:-elena.mereanu@gmail.com}"
        cat > profile_config.json << EOF
        {
          "name": "Elena Mereanu",
          "email": "$EMAIL",
          "target_roles": ["prompt engineer", "ai engineer", "ml engineer"],
          "skills": ["python", "pytorch", "llm", "gpt", "transformers"],
          "experience_level": "junior",
          "locations": ["remote", "US", "Boston", "New York"],
          "remote_preference": true,
          "github_url": "https://github.com/ElaMCB/Neuro",
          "linkedin_url": "linkedin.com/in/elenamereanu"
        }
        EOF
      env:
        USER_EMAIL: ${{ secrets.USER_EMAIL }}
    
    - name: Run weekly job search
      continue-on-error: true
      run: |
        # Use advanced job search if available, fallback to simple version
        if [ -f run_advanced_job_search.py ]; then
          echo "🔍 Running advanced job search..."
          python run_advanced_job_search.py || echo "⚠️  Advanced job search failed, continuing..."
        else
          echo "🔍 Running simple job search..."
          python run_neuro.py my_job_search.neuro || echo "⚠️  Job search script exited with error, continuing..."
        fi
    
    - name: Generate results report
      continue-on-error: true
      run: |
        # Get most recent results file
        if [ -d job_search_results ]; then
          LATEST_RESULT=$(ls -t job_search_results/job_search_*.json 2>/dev/null | head -1)
          if [ -n "$LATEST_RESULT" ]; then
            # Generate text report
            if [ -f display_results.py ]; then
              python display_results.py "$LATEST_RESULT" || echo "⚠️  Could not generate text report"
            fi
            # Generate HTML report
            if [ -f generate_html_report.py ]; then
              python generate_html_report.py "$LATEST_RESULT" job_search_report.html || echo "⚠️  Could not generate HTML report"
            fi
          else
            echo "⚠️  No results file found"
          fi
        else
          echo "⚠️  job_search_results directory not found"
        fi
    
    - name: Send email notification
      continue-on-error: true
      run: |
        python send_job_search_email.py || echo "⚠️  Email sending failed (check credentials in secrets)"
      env:
        RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
        SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
        SENDER_PASSWORD: ${{ secrets.SENDER_PASSWORD }}
    
    - name: Upload results as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: job-search-results-${{ github.run_number }}
        path: |
          job_search_results/**
          job_search_reports/**
          resume_templates/**
          job_search_report.html
        if-no-files-found: ignore
        retention-days: 30
    
    - name: Create summary
      if: always()
      run: |
        echo "## 🔍 Weekly Job Search Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Date:** $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check if results exist
        if [ -d job_search_results ]; then
          RESULT_COUNT=$(find job_search_results -name "*.json" | wc -l)
          echo "✅ Found $RESULT_COUNT result file(s)" >> $GITHUB_STEP_SUMMARY
          
          LATEST_RESULT=$(ls -t job_search_results/job_search_*.json 2>/dev/null | head -1)
          if [ -n "$LATEST_RESULT" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📄 Latest results: \`$LATEST_RESULT\`" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "⚠️  No results directory found" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📧 Email notification sent (if configured)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📦 Results are available in the artifacts above." >> $GITHUB_STEP_SUMMARY

